#!/usr/bin/python3

import os, sys, re, subprocess, shutil
import atexit
from pathlib import Path

VERSION = '0.0.4'  # Increment version

me = "flasher"

if len(sys.argv) < 3:  # Check for at least 3 arguments now
   print(f'''USAGE {me} <device> <base_path>
   examples:
      % ./{me} /dev/sdX /path/to/env/files
      % lsblk     -- and check output on which /dev/sdX your SD card resides --
      % sudo dd if=disk.img of=/dev/sdX bs=1M; sync  (Manual method)
''')
   sys.exit(-1)

dev = sys.argv[1]
base_path = sys.argv[2] # added base path

print(f"== {me} {VERSION} ==")
print(f"writing to {dev}")
print(f"Base path to {base_path}")

step = 'sdcard'  # Define the 'step' variable here!

base_path_path = Path(base_path)

env_full_path = base_path_path / ".env.txt"  # Use Path objects for cleaner path manipulation
env_full_cleanup = base_path_path / ".env.txt.orig"

if env_full_path.exists():
   print(f".env.txt found at: {env_full_path}")
else:
   print(f"No env.txt found at: {env_full_path} closing !")
   sys.exit(-1)

# -- a few helpers to en/decode nice numbers
def true_size(s):
   u = { 'B': 1, 'K': 1024, 'M': 1024*1024, 'G': 1024*1024*1024 }
   if m := re.search('(\d+)([BKMG])',s):
      return int(m.group(1)) * u[m.group(2)]
   return 0

def nice_size(n):
   u = { 'B': 1, 'K': 1024, 'M': 1024*1024, 'G': 1024*1024*1024 }
   for k,v in reversed(u.items()): 
      if n >= v and n % v == 0:
         return f"{n//v:,}{k}"
   return f"{n:,}B"

def cleanup():
   if env_full_cleanup.exists():
      os.rename(env_full_cleanup,env_full_path)
   print("done.")

atexit.register(cleanup)


with open(env_full_path) as fh:
   env2 = []
   for l in fh.readlines():
      if m := re.search('(blkdevparts|sd_parts)=(\w+)', l):
         _type = m.group(1)
         _dev = m.group(2)
         l = re.sub('blkdevparts=\w+:','',l)
         p = l.split(',')
         c_off = 0
         if step == 'sdcard' and _dev == 'mmcblk1': # Now step is defined
            for e in p:
               print(e)
               if (m := re.search('(\d+[KMG])@(\d+[KMG])\((\w+)\)',e)) or (m := re.search('(\d+[KMG])\((\w+)\)',e)):
                  if len(m.groups()) == 3:
                     size = true_size(m.group(1))
                     off = true_size(m.group(2))
                     name = m.group(3)
                  else:
                     size = true_size(m.group(1))
                     name = m.group(2)
                     off = 0
                  print(f"   {_dev}: {name}.img size:{size:,}/{nice_size(size)} (offset:{off:,}/{nice_size(off)})")

                  full_name = base_path_path / f"{name}.img" # Use Path object
                  if full_name.exists():
                     print(f"img found {full_name}\n")
                     size_ = full_name.stat().st_size  # Use Path object
                     print(f" imgsize:{size_:,} ({nice_size(size_)})\n")
                     if step == 'sdcard':
                        cmd = ['sudo', 'dd', f"if={full_name}", f"of={dev}", "bs=1k", f"seek={c_off//1024}"] # sudo added
                        # print("CMD")
                        # print(cmd)
                        # print("CMD")
                        try:
                           res = subprocess.run(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.PIPE, check=True, text=True) # text=True for stderr
                        #    print(f"stdout: {res.stdout}")  # Print stdout
                        #    print(f"stderr: {res.stderr}")
                        except subprocess.CalledProcessError as e:
                           print(f"ERROR: {e}")
                           print(f"stderr: {e.stderr}") # Print stderr for debugging
                           sys.exit(-1)
                     c_off += size
                  else:
                     print(f"ERROR: '{full_name}' not found")
                     sys.exit(-1)

         if _dev == 'mmcblk0':
            env2.append(l)

if step=='emmc':           # -- untested, not needed as 'upgrade_tool' does this already 
   shutil.copy(env_full_path,env_full_cleanup) # Path objects
   with open(env_full_path,"w") as fh: # Path object
      fh.write("\n".join(env2))

   # -- prepare upgrade_tool call to write to eMMC
   print(f"{base_path_path}/upgrade_tool") # Path object
   subprocess.run([f'{base_path_path}/upgrade_tool','uf','update.img']) # Path object